# SOF-ELKÂ® Configuration File
# Author: Phil Hagen
# Email: phil@lewestech.com
#
# (C)2022 Lewes Technology Consulting, LLC
#
# This conf file accepts logs from the KAPE forensic tool

filter {
  if [type] == "kape_evtxlogs" and "json" not in [tags] {
    mutate {
      # promote the fields of interest out of the [raw] placeholder
      # remove the [raw] placeholder

      rename => {
        "[raw][Computer]" => "computer"
        "[raw][RemoteHost]" => "remotehost"
        "[raw][UserId]" => "user_id"
        "[raw][UserName]" => "username"
        "[raw][Channel]" => "channel"
        "[raw][Provider]" => "provider"
        "[raw][EventId]" => "event_id"
        "[raw][EventRecordId]" => "event_record_id"
        "[raw][ProcessId]" => "process_id"
        "[raw][ThreadId]" => "thread_id"
        "[raw][Level]" => "level"
        "[raw][SourceFile]" => "source_file"
        "[raw][TimeCreated]" => "time_created"
        "[raw][RecordNumber]" => "record_number"
        "[raw][Payload]" => "payload"
        "[raw][MapDescription]" => "map_description"
        "[raw][ExecutableInfo]" => "executable_info"
        
        #dxie modifications added fields
        "[raw][ExtraDataOffset]" => "extradataoffset"
        "[raw][Keywords]" => "keyword"
        "[raw][HiddenRecord]" => "hiddenrecord"
        "[raw][ChunkNumber]" => "chunknumber"
      }
    }

    #Dxie: Since Sof-ELK already seperated the payload for us, I just created a new field to display the payload
    #no idea what [payload_json][EventData][Data] does 
     mutate {
     add_field => { "cert.payload" => "%{payload}" }
    }

    if [raw][PayloadData1] {
      mutate {
        add_field => {
          "payload_data" => [ "%{[raw][PayloadData1]}" ]
        }
      }
    }
    if [raw][PayloadData2] {
      mutate {
        add_field => {
          "payload_data" => [ "%{[raw][PayloadData2]}" ]
        }
      }
    }
    if [raw][PayloadData3] {
      mutate {
        add_field => {
          "payload_data" => [ "%{[raw][PayloadData3]}" ]
        }
      }
    }
    if [raw][PayloadData4] {
      mutate {
        add_field => {
          "payload_data" => [ "%{[raw][PayloadData4]}" ]
        }
      }
    }
    if [raw][PayloadData5] {
      mutate {
        add_field => {
          "payload_data" => [ "%{[raw][PayloadData5]}" ]
        }
      }
    }
    if [raw][PayloadData6] {
      mutate {
        add_field => {
          "payload_data" => [ "%{[raw][PayloadData6]}" ]
        }
      }
    }

    #remove the remaining(useless) fields that don't have raw
    mutate {
      remove_field => [ "raw" ]
    }

    # use the TimeCreated field for the timestamp
    date {
      match => [ "[time_created]", "ISO8601" ]
    }

    # If there is an EventData.Data field, tehy are not in KV form.  This will
    # convert the [ { "name": "foo, "value": "bar" } ] array to [ { "foo": "bar" } ] form
    if [payload] {
      json {
        source => "payload"
        target => "payload_json"
        remove_field => [ "payload" ]
      }
    }
    #nested feild
    if [payload_json][EventData] == '' {
      mutate {
        remove_field => [ "[payload_json][EventData]" ]
      }

    } else if [payload_json][EventData][Data] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
        script_params => {
          "source_field" => "[payload_json][EventData][Data]"
          "destination_field" => "[payload][event_data]"
          "key_field" => "@Name"
          "val_field" => "#text"
        }
        remove_field => [ "[payload_json][EventData][Data]" ]
      }
    }

    # this will occur if the ruby script failed, notably when [payload_json][EventData][Data] is just a string
    # this needs to be pushed into a subfield or an exception will occur since it'll be inconsistent with
    # other objects in the index
    if [payload_json][EventData][Data] {
      mutate {
        add_field => { "[payload][event_data][string]" => "%{[payload_json][EventData][Data]}" }
      }
    }

    # some remotehost fields will be ip:port format.  if so, pull those out to distinct fields.
    if [remotehost] {
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
        match => { "remotehost" => "%{IP:remote_ip}:%{INT:remote_port}"}
        tag_on_failure => [ "_gp_fail_evtx_ip" ]
      }
    }

    # PJH: We might need to extend the JSON parsing done on the Payload field to the PayloadData[1-6]
    #      fields. Those will present a large challenge because of the widely varied content they
    #      contain. Keeping as a string for the time being.
  }
}
