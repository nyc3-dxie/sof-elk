# SOF-ELKÂ® Configuration File
# (C)2022 Pierre Lidome and Arjun Bhardwaj
# (C)2023 SOF-ELK integrations and additional parsing features by Lewes Technology Consulting, LLC
#
# This file parses JSON-formatted Microsoft 365 UAL files in UTF-8 encoding
# For some versions of PowerShell, this may require manually specifying the encoding in the "out-file" scriptlet such as:
#   search-unifiedauditlog -StartDate 2022-12-01 -EndDate 2023-01-10 -ResultSize 5000 -SessionCommand ReturnNextPreviewPage | Select-Object -ExpandProperty AuditData | out-file -Encoding UTF8 "202201090807ual_All.json"
# reference: https://learn.microsoft.com/en-us/office/office-365-management-api/office-365-management-activity-api-schema#common-schema

filter {
  if [type] == "office365csv" {

    if [message] =~ /^CreationDate/ or [message] =~ /^RecordId/ or [message] =~ /^PSComputerName/ {
              drop{}
    }         
                                
# date-first format is from web-based log extraction
if [message] =~ /^[0-9]{4}-[0-9]{2}-[0-9]{2}T/ {
csv {
skip_header => "true"
skip_empty_rows => "true"
columns => [ "CreationDate", "UserIds", "Operations", "AuditData" ] 
}

    # GUID-first from more recent GUI extraction
} else if [message] =~ /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/ {
  csv {
skip_header => "true"
skip_empty_rows => "true"
columns => [ "RecordId", "CreationDate", "RecordType", "Operation", "UserId", "AuditData" ]
}

 # computername-first format is from powershell extraction
} else {
 csv {
 skip_header => "true"
 skip_empty_rows => "true"
 columns => [ "PSComputerName", "RunspaceId", "PSShowComputerName", "RecordType", "CreationDate", "UserIds", "Operations", "AuditData", "ResultIndex", "ResultCount", "Identity", "IsValid", "ObjectState" ]
 }
}

#dxie Modifications - gsub to remove the { } from the audit data
mutate{
  gsub => ["AuditData", "[\{\}]", ""]
} 

#split the Audit data into fields and values
if[AuditData]{    
   kv{
   timeout_millis => 90000             
   field_split => ","
   value_split => ":" 
   trim_key => '"'
   source => "AuditData"
 }
}   

#split the parameters into fields and values
if[Parameters]{
    kv{
    field_split => ","
    value_split => ":"
    trim_key => '"'
    source => "Parameters"
}

#temperary fields for the Names and Values
 mutate{
  add_field => {"pname" => "%{[Name]}"}
  add_field => {"pvalue" => "%{[Value]}"}
}

#match the index of the names and values to each other
ruby {
  code => '
  n = event.get("pname")
    if n
     ns = n.split(",")
     ns.each_index{|x|
     v = event.get("pvalue")
     vs = v.split(",")
     event.set("parameters.#{ns[x]}" , vs[x])
    }
  end
 '
}

 mutate{
  remove_field => ["Name", "Value", "pname", "pvalue"]
 }
}

#split feild into app_acceess_context.name
if[AppAccessContext]{
    kv{
     field_split => ","
     value_split => ":"
     trim_key => '"'   
     source => "AppAccessContext"
     target => "app_access_context"
 }
}

if[AffectedItems]{
    kv{
    field_split => ","
    value_split => ":"
    trim_key => '"'
    source => "AffectedItems"
    target => "affected_items"
} 
}

if[Target]{
 kv{
 field_split => ","
 value_split => ":"
 trim_key => '"'
 source => "Target"
 target => "target"
 }
}

    date {
      match => [ "[CreationTime]", "ISO8601" ]
    }
     
    # matching source IP from the field ClientIP
    if [ClientIP] {
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
        match => {
          "[ClientIP]" => [ "\[?%{IP:client_ip}\]?(?::%{INT:client_port})?" ]
        }
      }
    }

    # matching against ClientIPAddress or ActorIpAddress
    if [ClientIPAddress] or [ActorIpAddress] {
      grok {
        patterns_dir => [ "/usr/local/sof-elk/grok-patterns" ]
        match => {
          "[ClientIPAddress]" => [ "\[?%{IP:source_ip}\]?(?::%{INT:source_port})?" ]
          "[ActorIpAddress]" => [ "\[?%{IP:source_ip}\]?(?::%{INT:source_port})?" ]
        }
      }
    }


    # Break out the OperationProperties into their Name:Value assignments
  if [OperationProperties] == '' {
   mutate {
   remove_field => [ "OperationProperties" ]
 }
} else if [OperationProperties] {
  ruby {
  path => "/usr/local/sof-elk/supporting-scripts/split_kv_to_fields.rb"
  script_params => {
  "source_field" => "[OperationProperties]"
  "destination_field" => "[OperationProperties]"
  "key_field" => "Name"
  "val_field" => "Value"
 }
 }
}

   # Break out the ExtendedProperties into their Name:Value assignments
 if[ExtendedProperties]{
  kv{
  field_split => ","
  value_split => ":"
  trim_key => '"'
  source => "ExtendedProperties"
  }
 
 mutate{
       add_field => {"ename" => "%{[Name]}"}
       add_field => {"evalue" => "%{[Value]}"}
 }

 ruby {
 code => '
 en = event.get("ename")
 if en
 ens = en.split(",")
 ens.each_index{|x|
 ev = event.get("evalue")
 evs = ev.split(",")
 event.set("extended_properties.#{ens[x]}" , evs[x])
    }
 end
  '
 }

  mutate{
   remove_field => ["Name", "Value", "ename","evalue"]
  }
 }

    # Break out the DeviceProperties into their Name:Value assignments
 if[DeviceProperties]{
   kv{
      field_split => ","
      value_split => ":"
      trim_key => '"'
      source => "DeviceProperties"
   }

  mutate{
 add_field => {"dname" => "%{[Name]}"}
 add_field => {"dvalue" => "%{[Value]}"}
 }

 ruby {
 code => '
 dn = event.get("dname")
 if dn
 dns = dn.split(",")
 dns.each_index{|x|
 dv = event.get("dvalue")
 dvs = dv.split(",")
 event.set("device_properties.#{dns[x]}" , dvs[x])
 }
 end
 '
}

 mutate{
 remove_field => ["Name", "Value", "dname","dvalue"]
 }
}




    # Break out the ModfiedProperties array to a kv-multi
    if ["ModifiedProperties"] and !["ModifiedProperties"][0]["Name"] {
      # this occasionally occurs when [ModifiedProperties] is a string or an array of strings
      mutate {
        add_field => { "[modified_properties][flag]" => '%{["ModifiedProperties"]}' }
      }
    } else if ["ModifiedProperties"] {
      ruby {
        path => "/usr/local/sof-elk/supporting-scripts/split_kv_multi_to_fields.rb"
        script_params => {
          "source_field" => '["ModifiedProperties"]'
          "destination_field" => "[modified_properties]"
          "key_field" => "Name"
        }
      }
    }
    

    # mass field renaming
    # for some reason, this behaves erratically unless the fields are listed alphabetically
    # PJH: Need to validate: Id (name), SupportTicketId (format)
    mutate {
      rename => {
        "[AADSessionId]" => "aad_session_id"  
        "[Actor]" => "Actor"
        "[ActorContextId]" => "actor_context_guid"
        "[ActorIpAddress]" => "actor_ip_address"
        "[AlertEntityId]" => "alert_entity"
        "[AlertId]" => "alert_guid"
        "[AlertLinks]" => "alert_links"
        "[AlertType]" => "alert_type"
        "[APIId]" => "api_id"
        "[AppId]" => "app_id"
        "[ApplicationDisplayName]" => "application_display_name"
        "[ApplicationId]" => "application_guid"
        "[AuthenticationType]" => "authentication_type"
        "[AzureActiveDirectoryEventType]" => "azure_active_directory_event_type"
        "[BrowserName]" => "browser_name"
        "[BrowserVersion]" => "browser_version"
        "[Category]" => "category"
        "[ClientAppId]" => "client_app_id"
        "[ClientAppName]" => "client_app_name"
        "[ClientInfoString]" => "client_info_string"
        "[ClientRequestId]" => "client_request_id"
        "[ClientProcessName]" => "process_name"
        "[ClientVersion]" => "client_version"
        "[CmdletVersion]" => "cmdlet_version"
        "[Comments]" => "comments"
        "[CommunicationType]" => "communication_type"
        "[CorrelationId]" => "correlation_guid"
        "[CrossMailboxOperation]" => "cross_mailbox_operation"
        "[CustomUniqueId]" => "custom_unique_id"
        "[Data]" => "data"
        "[DestFolder]" => "destination_folder"
        "[DeviceDisplayName]" => "device_display_name"
        "[DoNotDistributeEvent]" => "do_not_distribute_event"
        "[EntityType]" => "entity_type"
        "[ErrorNumber]" => "error_number"
        "[EventData]" => "event_data"
        "[EventSource]" => "event_source"
        "[ExternalAccess]" => "external_access"
        "[FileSizeBytes]" => "file_size_bytes"
        "[Folder]" => "Folder"
        "[Folders]" => "folders"
        "[HighPriorityMediaProcessing]" => "high_priority_media_processing"
        "[Id]" => "report_guid"
        "[Identity]" => "identity"
        "[InterSystemsId]" => "inter_systems_guid"
        "[InternalLogonType]" => "internal_logon_type"
        "[IntraSystemId]" => "intra_system_guid"
        "[IsManagedDevice]" => "is_managed_device"
        "[IsValid]" => "is_valid"
        "[Item]" => "item"
        "[ItemName]" => "item_name"
        "[ItemType]" => "item_type"
        "[ListBaseType]" => "list_base_type"
        "[ListBaseTemplateType]" => "list_base_template_type"
        "[ListId]" =>  "list_guid"
        "[ListItemUniqueId]" => "list_item_unique_guid"
        "[ListServerTemplate]" => "ListServerTemplate"
        "[LogonError]" => "logon_error"
        "[LogonType]" => "logon_type"
        "[LogonUserSid]" => "logon_user_sid"
        "[MachineDomainInfo]" => "machine_domain_info"
        "[MachineId]" => "machine_id"
        "[MailboxGuid]" => "mailbox_guid"
        "[MailboxOwnerSid]" => "mailbox_owner_sid"
        "[MailboxOwnerUPN]" => "mailbox_owner_upn"
        "[Members]" => "members"
        "[Name]" => "Name"
        "[ObjectId]" => "object_id"
        "[ObjectName]" => "object_name"
        "[ObjectState]" => "object_state"
        "[Operation]" => "operation"
        "[OperationCount]" => "operation_count"
        "[Operations]" => "operations"
        "[OrganizationId]" => "organization_guid"
        "[OrganizationName]" => "organization_name"
        "[OriginatingServer]" => "originating_server"
        "[Path]" => "path"
        "[Platform]" => "Platform"
        "[PSComputerName]" => "ps_computer_name"
        "[PSShowComputerName]" => "ps_show_computer_name"
        "[ParentFolder]" => "parent_folder"
        "[PolicyId]" => "policy_guid"
        "[RecordId]" => "record_id"
        "[RecordType]" => "record_type"
        "[ResultCount]" => "result_count"
        "[ResultIndex]" => "result_index"
        "[ResultStatus]" => "result_status"
        "[RunspaceId]" => "runspace_guid"
        "[SessionId]" => "session_guid"
        "[Severity]" => "severity"
        "[Site]" => "site_guid"
        "[SiteUrl]" => "site_url"
        "[SkypeForBusinessEventType]" => "skype_for_business_event_type"
        "[Source]" => "source"
        "[SourceFileExtension]" => "source_file_extension"
        "[SourceFileName]" => "source_filename"
        "[SourceRelativeUrl]" => "source_relative_url"
        "[Status]" => "status"
        "[SupportTicketId]" => "support_ticket_id"
        "[Target]" => "Target"
        "[TargetContextId]" => "target_context_guid"
        "[TargetUserOrGroupName]" => "target_user_name"
        "[TargetUserOrGroupType]" => "target_user_type"
        "[TeamGuid]" => "team_guid"
        "[TeamName]" => "team_name"
        "[TenantName]" => "tenant_name"
        "[TokenIssuedAtTime]" => "token_issued_time"
        "[UniqueTokenId]" => "app_access_context_unique_token_id"
        "[UserAgent]" => "useragent"
        "[UserId]" => "user_name"
        "[UserIds]" => "user_ids"
        "[UserKey]" => "user_key"
        "[UserType]" => "user_type"
        "[Version]" => "version"
        "[WebId]" => "web_guid"
        "[Workload]" => "workload"
      }
    }

    if "_kv_filter_timeout" in [tags] {
        mutate{
       add_field => {"_ERROR" => "AuditData to large please read the google doc"}
    }
   }
    mutate{
    remove_field => ["message", "value", "aac", '"ClientIP"','"CreationTime"',"Operation", "UserId", "RecordType", "RecordId" , "AppAccessContext", "DeviceProperties","ExtendedProperties","Target" ]  
    #comment out when making changes to help see if the information displayed is accurate 
    remove_field => "AuditData"
    remove_field => "Parameters"
    remove_field => "AffectedItems"

    }
  
  }
}
